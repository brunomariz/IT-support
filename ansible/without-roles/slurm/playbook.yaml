- name: Example playbook
  hosts: all
  become: true
  gather_facts: true

  vars_files:
    - ../ipa/vars/vars.yaml
    - ./vars/vars.yaml

  tasks:

    - name: Create IPA users
      block:

        - name: Create Slurm user 
          community.general.ipa_user:
            name: slurm
            state: present
            givenname: slurm
            sn: "user"
            loginshell: /bin/bash
            homedirectory: /var/lib/slurm
            title: "SLURM workload manager"
            ipa_host: "{{server_hostname}}"
            ipa_user: admin
            ipa_pass: "{{ADMIN_PASSWORD}}"
            update_password: on_create

        - name: Create Munge user 
          community.general.ipa_user:
            name: munge
            state: present
            givenname: munge
            sn: "user"
            loginshell: /sbin/nologin
            homedirectory: /var/lib/munge
            ipa_host: "{{server_hostname}}"
            ipa_user: admin
            ipa_pass: "{{ADMIN_PASSWORD}}"
            update_password: on_create

    - name: Configure Munge
      block:
        - name: Install EPEL
          ansible.builtin.dnf:
            name: epel-release
            state: latest

        - name: Install Munge
          ansible.builtin.dnf:
            enablerepo: devel
            name: 
              - munge 
              - munge-libs
              - munge-devel
            state: latest

        - name: Install rng tools
          ansible.builtin.dnf:
            name: rng-tools 
            state: latest

        - name: Run rng input file command
          ansible.builtin.shell:
            cmd: rngd -r /dev/urandom

        - name: Generate random munge key on headnode
          when: inventory_hostname in groups['headnode'] 
          ansible.builtin.shell:
            cmd: /usr/sbin/create-munge-key -r -f && dd if=/dev/urandom bs=1 count=1024 > /etc/munge/munge.key && chown munge:munge /etc/munge/munge.key && chmod 400 /etc/munge/munge.key

        - name: Copy munge key to compute nodes
          block:
            - name: Fetch key from headnode
              when: inventory_hostname in groups['headnode']
              ansible.builtin.fetch:
                src: /etc/munge/munge.key
                dest: ./tmp/munge.key
                flat: true

            - name: Copy key to compute nodes
              when: inventory_hostname in groups['computenodes']
              ansible.builtin.copy:
                force: true
                src: ./tmp/munge.key
                dest: /etc/munge/munge.key

            - name: Change key ownership, group and permissions
              when: inventory_hostname in groups['computenodes']
              ansible.builtin.file:
                path: /etc/munge/munge.key
                owner: munge
                group: munge
                mode: '400'

        - name: Start munge
          ansible.builtin.systemd_service:
            name: munge
            state: started

    - name: Configure mariadb
      block:

        - name: Add mariadb repo
          ansible.builtin.shell:
            cmd: curl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | bash
        
        - name: Install mariadb
          ansible.builtin.dnf:
            enablerepo: devel
            name:
              - MariaDB-client
              - MariaDB-shared
              - MariaDB-devel
              - MariaDB-server
              - MariaDB-backup

        - name: Configure mariadb
          ansible.builtin.template:
            src: templates/my.cnf
            dest: /etc/my.cnf

        - name: Enable mariadb
          ansible.builtin.systemd_service:
            name: mariadb
            state: started
            enabled: true

        - name: Check if database already exists
          ignore_errors: true
          when: inventory_hostname in groups['headnode']
          ansible.builtin.shell:
            cmd: mysql -e "show databases" | grep slurm_acct_db
          register: db_check

        - name: Create database
          when: 
            - inventory_hostname in groups['headnode']
            - '"slurm_acct_db" not in db_check.stdout_lines'
          ansible.builtin.shell:
            cmd: mariadb -e "create database slurm_acct_db"

        - name: Check if user already exists
          ignore_errors: true
          when: inventory_hostname in groups['headnode']
          ansible.builtin.shell:
            cmd: mariadb -e "select user from mysql.user" | grep slurm
          register: user_check

        - name: Create database user
          when: 
            - inventory_hostname in groups['headnode']
            - '"slurm" not in user_check.stdout_lines'
          ansible.builtin.shell:
            cmd: mariadb -e "create user 'slurm'@'localhost' identified by '{{SLURM_PASS}}';" && mariadb -e "grant all on slurm_acct_db.* TO 'slurm'@'localhost';" && mariadb -e "FLUSH PRIVILEGES;"

    - name: Install slurm rpms
      block:

        # Source: https://www.lncc.br/~brunoaf/SD06.pdf 

        - name: Download slurm
          ansible.builtin.get_url:
            url: https://download.schedmd.com/slurm/slurm-23.11.3.tar.bz2
            dest: /root/slurm-23.11.3.tar.bz2

        - name: Install necessary packages for slurm
          ansible.builtin.dnf:
            enablerepo: devel
            name:
              - rpm-build
              - pam-devel
              - readline-devel
              - dbus-devel
              - perl

        - name: Check previous Build
          ignore_errors: true
          ansible.builtin.shell:
            cmd: if test -d /root/rpmbuild/RPMS/x86_64/;then echo "exists"; fi
          register: check_rpmbuild

        - name: Build slurm rpms
          when: '"exists" not in check_rpmbuild.stdout_lines'
          ansible.builtin.shell:
            chdir: /root
            cmd: rpmbuild -ta slurm-23.11.3.tar.bz2

        - name: Create scratch directory
          ansible.builtin.file:
            path: /scratch/app/slurm-rpms
            state: directory

        - name: Copy files to scratch directory
          ansible.builtin.copy:
            remote_src: true
            src: /root/rpmbuild/RPMS/x86_64/
            dest: /scratch/app/slurm-rpms/

        - name: Install rpms - headnode
          when: inventory_hostname in groups['headnode']
          ansible.builtin.dnf:
            disable_gpg_check: true
            name: 
              - /scratch/app/slurm-rpms/slurm-23.11.3-1.el9.x86_64.rpm
              - /scratch/app/slurm-rpms/slurm-perlapi-23.11.3-1.el9.x86_64.rpm
              - /scratch/app/slurm-rpms/slurm-slurmctld-23.11.3-1.el9.x86_64.rpm
              - /scratch/app/slurm-rpms/slurm-slurmdbd-23.11.3-1.el9.x86_64.rpm
              - /scratch/app/slurm-rpms/slurm-example-configs-23.11.3-1.el9.x86_64.rpm
              - /scratch/app/slurm-rpms/slurm-devel-23.11.3-1.el9.x86_64.rpm
              - /scratch/app/slurm-rpms/slurm-contribs-23.11.3-1.el9.x86_64.rpm

        - name: Install rpms - computenodes
          when: inventory_hostname in groups['computenodes']
          ansible.builtin.dnf:
            disable_gpg_check: true
            name: 
              - /scratch/app/slurm-rpms/slurm-23.11.3-1.el9.x86_64.rpm
              - /scratch/app/slurm-rpms/slurm-perlapi-23.11.3-1.el9.x86_64.rpm
              - /scratch/app/slurm-rpms/slurm-slurmd-23.11.3-1.el9.x86_64.rpm
              - /scratch/app/slurm-rpms/slurm-pam_slurm-23.11.3-1.el9.x86_64.rpm

    - name: Configure directory structure and start services
      block:
        
        - name: Create dirs
          ansible.builtin.file:
            path: "{{item}}"
            state: directory
            owner: slurm
            group: slurm
          loop:
            - /var/log/slurm/
            - /var/spool/slurm/d
            - /var/spool/slurm/ctld

        - name: Create db conf file
          when: inventory_hostname in groups['headnode']
          ansible.builtin.template:
            src: ./templates/slurmdbd.conf 
            dest: /etc/slurm/slurmdbd.conf
            owner: slurm
            group: slurm
            mode: "600"

        - name: Start slurmdbd
          when: inventory_hostname in groups['headnode']
          ansible.builtin.systemd_service:
            name: slurmdbd
            state: started
            enabled: true

        - name: Ensure /etc/slurm directory exists on all hosts
          ansible.builtin.file:
            path: /etc/slurm
            state: directory
            owner: slurm
            group: slurm
            

        - name: Create slurm.conf file
          ansible.builtin.template:
            src: ./templates/slurm.conf 
            dest: /etc/slurm/slurm.conf
            owner: slurm
            group: slurm
            mode: "644"

        - name: Create cgroup.conf file
          ansible.builtin.template:
            src: ./templates/cgroup.conf 
            dest: /etc/slurm/cgroup.conf
            owner: slurm
            group: slurm
            mode: "600"

        - name: Start slurmctld
          when: inventory_hostname in groups['headnode']
          ansible.builtin.systemd_service:
            name: slurmctld
            state: started
            enabled: true

        - name: Start slurmd
          when: inventory_hostname in groups['computenodes']
          ansible.builtin.systemd_service:
            name: slurmd
            state: started
            enabled: true
        

    - name: Configure firewall
      block:

        - name: Configure firewall TCP ports
          ansible.posix.firewalld:
            port: "{{item}}/tcp" 
            permanent: true
            state: enabled
          loop: 
            - "6817"
            - "6818"
            - "6819"
            - "3306"
            - "{{SLURM_SRUN_PORT_RANGE}}"

        - name: Reload firewall
          ansible.builtin.systemd_service:
            name: firewalld
            state: reloaded

